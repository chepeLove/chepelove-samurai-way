{"version":3,"file":"static/js/460.2ac93649.chunk.js","mappings":"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","sources":["components/profile/profileInfo/profileStatus/ProfileStatus.tsx","components/profile/profileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/profile/posts/post/Post.module.css?3dbd","components/profile/posts/post/Post.tsx","components/profile/posts/addPostForm/addNewPostForm.tsx","components/profile/posts/Posts.tsx","components/profile/posts/PostsContainer.ts","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","hoc/withAuthRedirectComponent.tsx"],"sourcesContent":["import React, {ChangeEvent} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string | null\r\n    updateUserStatus: (status:string) => void\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusType, { editMode:boolean,status: string | null}> {\r\n\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<{\r\n        editMode: boolean;\r\n        status: string | null\r\n    }>) {\r\n        if(prevProps.status !== this.props.status){\r\n            this.setState({\r\n                status:this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    state = {\r\n        editMode: false,\r\n        status:this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode:true\r\n        })\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode:false\r\n        })\r\n        this.props.updateUserStatus(this.state.status ?? '')\r\n    }\r\n\r\n    onStatusChange = (e:ChangeEvent<HTMLInputElement>)=>{\r\n        this.setState({\r\n            status:e.currentTarget.value\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                  <div>\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status || 'User has no status'}</span>\r\n                  </div>\r\n                }\r\n                {this.state.editMode &&\r\n                  <div>\r\n                    <input type=\"text\" onBlur={this.deactivateEditMode}\r\n                            value={this.state.status ?? ''}\r\n                           onChange={this.onStatusChange}\r\n                           autoFocus\r\n                    />\r\n                  </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {UserProfileType} from \"../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {ProfileStatus} from \"./profileStatus/ProfileStatus\";\r\n\r\ntype ProfileInfoType = {\r\n    profile:UserProfileType | null\r\n    status:string\r\n    updateUserStatus: (status:string) => void\r\n}\r\n\r\nexport const ProfileInfo = (props:ProfileInfoType) => {\r\n    if(!props.profile){\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/*<div>*/}\r\n            {/*    <img src='https://www.seekpng.com/png/detail/268-2682643_image-illustrating-a-social-media-network-social-media.png' alt='avatar user'/>*/}\r\n            {/*</div>*/}\r\n            <div>\r\n                <img src={props.profile.photos.large ? props.profile.photos.large : ''} alt={'avatar'}/>\r\n            </div>\r\n            <ProfileStatus status={props.status}\r\n                           updateUserStatus={props.updateUserStatus}\r\n            />\r\n            <div>\r\n                Contacts : {props.profile.contacts.facebook}\r\n            </div>\r\n        </>\r\n\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__CaKi7\"};","import React from 'react';\r\nimport style from './Post.module.css'\r\n\r\ntype postPropsType = {\r\n    post:string\r\n    likeCount: string\r\n}\r\n\r\nexport const Post = (props:postPropsType) => {\r\n    return (\r\n        <div className={style.item}>\r\n            <img src=\"https://png.pngtree.com/png-clipart/20190921/original/pngtree-user-avatar-boy-png-image_4693645.jpg\" alt=\"avatar\"/>\r\n            <div>{props.post}</div>\r\n            <span>like: {props.likeCount}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport {FormControl} from \"../../../common/formsControls/FormsControls\";\r\n\r\nexport type addPostFormType = {\r\n    newPostText: string;\r\n};\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<addPostFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={FormControl}\r\n                       tagName=\"textarea\"\r\n                       name=\"newPostText\"\r\n                       placeholder=\"Enter your post\"\r\n                       validate={[required, maxLength100]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const AddNewPostFormRedux = reduxForm<addPostFormType>({\r\n    form: 'profileAddPostForm',\r\n})(AddNewPostForm);","import React, {PureComponent} from 'react';\r\nimport {Post} from \"./post/Post\";\r\nimport {PostsType} from \"./PostsContainer\";\r\nimport {AddNewPostFormRedux, addPostFormType} from \"./addPostForm/addNewPostForm\";\r\n\r\nexport class Posts extends PureComponent<PostsType> {\r\n\r\n    addPost = (value: addPostFormType) => {\r\n        this.props.addPost(value.newPostText)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                My posts\r\n                <AddNewPostFormRedux onSubmit={this.addPost}/>\r\n                <div>\r\n                    New posts\r\n                </div>\r\n                {this.props.posts.map((post) => {\r\n                    return (\r\n                        <Post post={post.post} likeCount={post.likeCount}/>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    };\r\n}","import {addPost, postsType} from \"../../../redux/profile-reducer\";\r\nimport {Posts} from \"./Posts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype mapStateToPropsType = {\r\n    posts:postsType[]\r\n}\r\n\r\ntype mapDispatchToProps = {\r\n    addPost:(newPostText:string)=>void\r\n}\r\n\r\nexport type PostsType = mapStateToPropsType & mapDispatchToProps\r\n\r\nconst mapStateToProps = (state:AppStateType):mapStateToPropsType => {\r\n    return {\r\n        posts:state.profilePage.posts,\r\n    }\r\n}\r\n\r\nexport const PostsContainer = connect(mapStateToProps, {addPost})(Posts)\r\n","import React from 'react';\r\nimport {ProfileInfo} from \"./profileInfo/ProfileInfo\";\r\nimport {PostsContainer} from \"./posts/PostsContainer\";\r\nimport {UserProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfileType = {\r\n    profile:UserProfileType | null\r\n    status:string\r\n    updateUserStatus: (status:string) => void\r\n}\r\n\r\nexport const Profile = (props:ProfileType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile = {props.profile}\r\n                         status={props.status}\r\n                         updateUserStatus = {props.updateUserStatus}\r\n            />\r\n            <PostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getUserProfileTC, getUserStatusTC, UserProfileType,updateUserStatusTC} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirectComponent} from \"../../hoc/withAuthRedirectComponent\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId && this.props.authorizedUserId) {\r\n            userId = this.props.authorizedUserId\r\n        }\r\n        if (!userId){\r\n            this.props.history.push('/login')\r\n        }\r\n            this.props.getUserProfileTC(userId);\r\n            this.props.getUserStatusTC(userId);\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateUserStatus = {this.props.updateUserStatusTC}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ntype ProfileContainerType = MapStateToPropsType & MapDispatchToProps & RouteComponentProps<PathParamsType>\r\n\r\ntype PathParamsType = {\r\n    userId: string,\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: UserProfileType | null\r\n    status:string\r\n    authorizedUserId:string | null\r\n    isAuth:boolean\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    getUserProfileTC: (userId: string) => void\r\n    getUserStatusTC: (userId: string) => void\r\n    updateUserStatusTC: (status:string) => void\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status:state.profilePage.status,\r\n        authorizedUserId:state.auth.id,\r\n        isAuth:state.auth.isAuth\r\n    }\r\n}\r\n\r\n// const WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfileTC,\r\n        getUserStatusTC,\r\n        updateUserStatusTC\r\n    }),\r\n    withRouter,\r\n    withAuthRedirectComponent\r\n    )(ProfileContainer)\r\n\r\n// export default connect(mapStateToProps, {getUserProfileTC})(WithUrlDataContainerComponent)\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth:boolean\r\n}\r\n\r\nconst mapStateToProps = (state:AppStateType):MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirectComponent <T>(Component:ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props:MapStatePropsType)=>{\r\n        const {isAuth,...restProps} = props\r\n        if(!props.isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}"],"names":["ProfileStatus","state","editMode","status","props","activateEditMode","setState","deactivateEditMode","updateUserStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","this","onDoubleClick","type","onBlur","onChange","autoFocus","React","ProfileInfo","profile","src","photos","large","alt","contacts","facebook","Preloader","Post","className","style","post","likeCount","maxLength100","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","FormControl","tagName","name","placeholder","validate","required","Posts","addPost","newPostText","posts","map","PureComponent","PostsContainer","connect","profilePage","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfileTC","getUserStatusTC","updateUserStatusTC","compose","auth","id","isAuth","withRouter","withAuthRedirectComponent","mapStateToProps","Component","restProps","to"],"sourceRoot":""}