{"version":3,"file":"static/js/637.837cb3a6.chunk.js","mappings":"0KACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAuG,sBAAvG,EAAsI,wBAAtI,EAAyK,0BAAzK,EAA6M,yB,mBCOhMA,EAAe,SAACC,GACzB,OACQ,gBAAKC,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASC,GAAI,YAAcH,EAAMI,GAAIC,gBAAiBH,EAAtD,SAAqEF,EAAMM,UCL9EC,EAAU,SAACP,GACpB,OACQ,gBAAKC,UAAWC,EAAhB,SAAgCF,EAAMQ,W,uCCC5CC,GAAeC,EAAAA,EAAAA,GAAiB,KAmBzBC,GAAsBC,EAAAA,EAAAA,GAA8B,CAC7DC,KAAM,wBADyBD,EAjB4C,SAACZ,GAC5E,OACI,kBAAMc,SAAUd,EAAMe,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EACXC,QAAQ,WACRb,KAAK,iBACLc,YAAY,qBACZC,SAAU,CAACC,EAAAA,EAAUb,QAEhC,0BACI,6CCfHc,EAAU,SAACvB,GAEpB,IAAMwB,EAAiBxB,EAAMyB,YAAYC,QAAQC,KAAI,SAACC,GAClD,OACI,SAAC7B,EAAD,CAA8BO,KAAMsB,EAAOtB,KAC7BF,GAAIwB,EAAOxB,IADNwB,EAAOxB,OAM5ByB,EAAmB7B,EAAMyB,YAAYK,SAASH,KAAI,SAACnB,GACrD,OACI,SAACD,EAAD,CAA0BC,QAASA,EAAQA,SAA7BA,EAAQJ,OAQ9B,OACI,+BACI,iBAAKH,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKsB,KAEL,iBAAKvB,UAAWC,EAAhB,WACI,yBAAM2B,KACN,0BACI,SAAClB,EAAD,CAAqBG,SAZtB,SAACiB,GAChB/B,EAAMgC,YAAYD,EAAME,8B,mBCL5BC,EAAkB,SAACC,GACnB,MAAO,CACHV,YAAYU,EAAMV,eAI1BW,E,QAAAA,IAAQC,EAAAA,GAA0BC,EAAAA,EAAAA,IAAQJ,EAAgB,CACtDF,YAAAA,EAAAA,IADJI,CAEIb,GAEJ,IAAMgB,GAAwBF,EAAAA,EAAAA,GAA0Bd,GAMxD,GAJ2Be,EAAAA,EAAAA,IAAQJ,EAAgB,CAC/CF,YAAAA,EAAAA,GADuBM,CAExBC,I,gICxBGL,EAAkB,SAACC,GACrB,MAAO,CACHK,OAAQL,EAAMM,KAAKD,SAIpB,SAASH,EAA8BK,GAQ1C,OAAOJ,EAAAA,EAAAA,IAAQJ,EAARI,EANmB,SAACtC,GACOA,EAAvBwC,OAAP,IAAiBG,GAAjB,OAA8B3C,EAA9B,GACA,OAAIA,EAAMwC,QACH,SAACE,GAAD,UAAeC,KADG,SAAC,KAAD,CAAUxC,GAAI","sources":["webpack://samurai-way/./src/components/dialogs/Dialogs.module.css?04a9","components/dialogs/dialogsItem/DialogsItems.tsx","components/dialogs/message/Message.tsx","components/dialogs/addMessageForm/addMessageForm.tsx","components/dialogs/Dialogs.tsx","components/dialogs/DialogsContainer.tsx","hoc/withAuthRedirectComponent.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__m+Ukp\",\"dialogsItems\":\"Dialogs_dialogsItems__7KhPg\",\"item\":\"Dialogs_item__njXIZ\",\"active\":\"Dialogs_active__w4nhR\",\"messages\":\"Dialogs_messages__-hl+h\",\"message\":\"Dialogs_message__CG9Tx\"};","import React from 'react';\r\nimport style from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogsItemsPropsType = {\r\n    name:string\r\n    id:string\r\n}\r\nexport const DialogsItems = (props:DialogsItemsPropsType) => {\r\n    return (\r\n            <div className={style.item}>\r\n                <NavLink to={\"/dialogs/\" + props.id} activeClassName={style.active}>{props.name}</NavLink>\r\n            </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport style from \"../Dialogs.module.css\";\r\n\r\ntype MessagePropsType = {\r\n    message:string\r\n}\r\nexport const Message = (props:MessagePropsType) => {\r\n    return (\r\n            <div className={style.message}>{props.message}</div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {FormControl} from \"../../common/formsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\n\r\nexport type AddMessageFormType = {\r\n    newMessageText: string;\r\n};\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={FormControl}\r\n                       tagName=\"textarea\"\r\n                       name=\"newMessageText\"\r\n                       placeholder=\"Enter your message\"\r\n                       validate={[required, maxLength100]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const AddMessageFormRedux = reduxForm<AddMessageFormType>({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm);","import React from 'react';\r\nimport style from './Dialogs.module.css'\r\nimport {DialogsItems} from \"./dialogsItem/DialogsItems\";\r\nimport {Message} from \"./message/Message\";\r\nimport {DialogsType} from \"./DialogsContainer\";\r\nimport {AddMessageFormRedux, AddMessageFormType} from \"./addMessageForm/addMessageForm\";\r\n\r\nexport const Dialogs = (props: DialogsType) => {\r\n\r\n    const dialogsElement = props.dialogsPage.dialogs.map((dialog) => {\r\n        return (\r\n            <DialogsItems key={dialog.id} name={dialog.name}\r\n                          id={dialog.id}\r\n            />\r\n        )\r\n    })\r\n\r\n    const messagesElements = props.dialogsPage.messages.map((message) => {\r\n        return (\r\n            <Message key={message.id} message={message.message}/>\r\n        )\r\n    })\r\n\r\n\r\n    const AddMessage = (value:AddMessageFormType) => {\r\n        props.sendMessage(value.newMessageText)\r\n    }\r\n    return (\r\n        <>\r\n            <div className={style.dialogs}>\r\n                <div className={style.dialogsItems}>\r\n                    {dialogsElement}\r\n                </div>\r\n                <div className={style.messages}>\r\n                    <div>{messagesElements}</div>\r\n                    <div>\r\n                        <AddMessageFormRedux onSubmit = {AddMessage}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n\r\n    );\r\n};\r\n\r\n","import {\r\n    InitialDialogsStateType,\r\n    sendMessage,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirectComponent} from \"../../hoc/withAuthRedirectComponent\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage:InitialDialogsStateType\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    sendMessage:(newMessageText:string)=>void\r\n}\r\n\r\nexport type DialogsType = MapStateToPropsType & mapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType):MapStateToPropsType=>{\r\n    return {\r\n        dialogsPage:state.dialogsPage,\r\n    }\r\n}\r\n\r\ncompose(withAuthRedirectComponent,connect(mapStateToProps,{\r\n    sendMessage,\r\n}))(Dialogs)\r\n\r\nconst AuthRedirectComponent = withAuthRedirectComponent(Dialogs)\r\n\r\n  const DialogsContainer = connect(mapStateToProps,{\r\n    sendMessage,\r\n})(AuthRedirectComponent)\r\n\r\nexport default DialogsContainer;\r\n\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth:boolean\r\n}\r\n\r\nconst mapStateToProps = (state:AppStateType):MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirectComponent <T>(Component:ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props:MapStatePropsType)=>{\r\n        const {isAuth,...restProps} = props\r\n        if(!props.isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}"],"names":["DialogsItems","props","className","style","to","id","activeClassName","name","Message","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","FormControl","tagName","placeholder","validate","required","Dialogs","dialogsElement","dialogsPage","dialogs","map","dialog","messagesElements","messages","value","sendMessage","newMessageText","mapStateToProps","state","compose","withAuthRedirectComponent","connect","AuthRedirectComponent","isAuth","auth","Component","restProps"],"sourceRoot":""}